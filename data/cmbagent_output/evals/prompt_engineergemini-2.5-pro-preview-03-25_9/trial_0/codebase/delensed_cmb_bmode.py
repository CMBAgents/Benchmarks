# filename: codebase/delensed_cmb_bmode.py
r"""
Calculates the delensed CMB B-mode polarization power spectrum (C_l^BB)
for a flat Lambda CDM cosmology using CAMB.

The script performs the following steps:
1. Sets cosmological parameters as specified.
2. Initializes CAMB and computes CMB power spectra, including tensor modes
   and lensed scalar modes.
3. Extracts the tensor B-mode power spectrum (primordial B-modes) and the
   lensed scalar B-mode power spectrum (B-modes from gravitational lensing
   of E-modes).
4. Applies a specified delensing efficiency to the lensed scalar B-modes.
   The delensed spectrum is C_l^BB_tensor + (1 - efficiency) * C_l^BB_lensed_scalar.
5. Saves the resulting delensed C_l^BB (in muK^2) for multipoles l=2 to 3000
   into a CSV file named 'result.csv' in the 'data/' directory.
6. Prints a summary of the saved data to the console.
"""

import camb
import numpy as np
import pandas as pd
import os


def main():
    r"""
    Main function to calculate and save the delensed CMB B-mode power spectrum.
    """
    # Cosmological parameters
    H0 = 67.5  # Hubble constant in km/s/Mpc
    ombh2 = 0.022  # Baryon density Omega_b * h^2
    omch2 = 0.122  # Cold dark matter density Omega_c * h^2
    mnu = 0.06  # Sum of neutrino masses in eV
    omk = 0.0  # Curvature Omega_k
    tau = 0.06  # Optical depth to reionization
    r_tensor_to_scalar = 0.1  # Tensor-to-scalar ratio
    As_scalar = 2e-9  # Scalar amplitude
    ns_scalar = 0.965  # Scalar spectral index
    
    lmax_calc = 3000  # Maximum multipole moment for calculation
    delensing_efficiency = 0.10  # Delensing efficiency (10% = 0.10)

    print("Setting CAMB parameters...")
    # Create CAMBparams object
    pars = camb.CAMBparams()

    # Set cosmological parameters
    pars.set_cosmology(H0=H0, ombh2=ombh2, omch2=omch2, mnu=mnu, omk=omk, tau=tau)

    # Set initial power spectrum parameters
    # As, ns define the primordial scalar power spectrum
    # r defines the amplitude of the primordial tensor power spectrum relative to scalar
    pars.InitPower.set_params(As=As_scalar, ns=ns_scalar, r=r_tensor_to_scalar)

    # We want tensor modes for primordial B-modes
    pars.WantTensors = True

    # Set lmax for calculation.
    # lens_potential_accuracy=1 is default.
    # max_eta_k_tensor needs to be adequate for the lmax of tensor modes.
    # A common choice for max_eta_k_tensor is 2*lmax or higher.
    pars.set_for_lmax(lmax=lmax_calc, max_eta_k_tensor=2 * lmax_calc, lens_potential_accuracy=1)
    
    print("Calculating CMB power spectra with CAMB...")
    # Get the power spectra from CAMB
    # We request C_l (raw_cl=True) in muK^2 units (CMB_unit='muK').
    # Spectra needed:
    # 'lensed_scalar': C_l from lensed scalar perturbations (this is C_l^BB,lensing)
    # 'tensor': C_l from tensor perturbations (this is C_l^BB,primordial)
    results = camb.get_results(pars)
    powers = results.get_cmb_power_spectra(lmax=lmax_calc, 
                                           spectra=['lensed_scalar', 'tensor'], 
                                           CMB_unit='muK', 
                                           raw_cl=True)

    # Extract the relevant B-mode spectra (index 2 for BB)
    # powers['spectrum_type'] is an array of shape (num_spectra_components, lmax_calc + 1)
    # e.g., for TT, EE, BB, TE, num_spectra_components is 4.
    # Columns are TT, EE, BB, TE. We need BB (index 2).
    # Units are muK^2 since raw_cl=True and CMB_unit='muK'.
    
    # Lensed scalar BB spectrum (C_l^BB,lensing)
    # This is the B-mode power generated by gravitational lensing of E-modes.
    cl_bb_lensed_scalar = powers['lensed_scalar'][:, 2]  # Units: muK^2

    # Tensor BB spectrum (C_l^BB,primordial)
    # This is the primordial B-mode power from inflationary gravitational waves.
    cl_bb_tensor = powers['tensor'][:, 2]  # Units: muK^2

    print("Applying delensing efficiency...")
    # Calculate the delensed B-mode power spectrum:
    # C_l^BB_delensed = C_l^BB_primordial + (1 - efficiency) * C_l^BB_lensing
    # (1 - efficiency) is the fraction of lensing B-modes remaining after delensing.
    cl_bb_delensed = cl_bb_tensor + (1.0 - delensing_efficiency) * cl_bb_lensed_scalar # Units: muK^2

    # Multipole moments from l=2 to l=lmax_calc
    # CAMB output arrays are 0-indexed (l=0, 1, ..., lmax_calc).
    ls = np.arange(2, lmax_calc + 1, dtype=int) # Integer multipole moments

    # Select the C_l values for the specified range of l
    # cl_bb_delensed is an array of length (lmax_calc + 1).
    # We take elements from index 2 up to lmax_calc (inclusive).
    cl_bb_delensed_selected = cl_bb_delensed[ls] # Units: muK^2

    print("Preparing data for saving...")
    # Create a Pandas DataFrame
    df_results = pd.DataFrame({'l': ls, 
                               'BB': cl_bb_delensed_selected}) # BB is C_l^BB in muK^2

    # Define data directory and ensure it exists
    data_dir = 'data/'
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
        print("Created directory: " + data_dir)

    # Save results to a CSV file
    csv_filename = os.path.join(data_dir, 'result.csv')
    df_results.to_csv(csv_filename, index=False, float_format='%.8e') # Save with scientific notation for precision

    print("Successfully calculated and saved delensed CMB B-mode power spectrum.")
    print("File saved to: " + csv_filename)
    
    print("\n--- Summary of Saved Data ---")
    print("Cosmological Parameters Used:")
    print("  H0: " + str(H0) + " km/s/Mpc")
    print("  Omega_b h^2: " + str(ombh2))
    print("  Omega_c h^2: " + str(omch2))
    print("  Sum of neutrino masses: " + str(mnu) + " eV")
    print("  Omega_k: " + str(omk))
    print("  Optical depth (tau): " + str(tau))
    print("  Tensor-to-scalar ratio (r): " + str(r_tensor_to_scalar))
    print("  Scalar amplitude (A_s): " + str(As_scalar))
    print("  Scalar spectral index (n_s): " + str(ns_scalar))
    print("Delensing efficiency: " + str(delensing_efficiency * 100) + "%")
    print("Multipole range (l): 2 to " + str(lmax_calc))
    
    # Set pandas display options for full output to console
    pd.set_option('display.max_rows', 10)
    pd.set_option('display.width', 100) # Adjust width as needed for your console

    print("\nFirst 5 rows of the CSV file (" + csv_filename + "):")
    print(df_results.head().to_string())
    print("\nLast 5 rows of the CSV file (" + csv_filename + "):")
    print(df_results.tail().to_string())
    
    print("\nDescriptive statistics for the 'BB' column (C_l^BB in muK^2):")
    print(df_results['BB'].describe().to_string())


if __name__ == '__main__':
    main()
