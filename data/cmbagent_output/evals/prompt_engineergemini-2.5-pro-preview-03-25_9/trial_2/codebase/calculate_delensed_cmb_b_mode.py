# filename: codebase/calculate_delensed_cmb_b_mode.py
import camb
import numpy as np
import pandas as pd
import os

def calculate_delensed_cmb_b_mode():
    r"""
    Calculates the delensed CMB B-mode polarization power spectrum (C_ell^BB)
    for a flat Lambda CDM cosmology using CAMB.

    The calculation uses specified cosmological parameters and a delensing efficiency.
    The results (multipole moment l and C_ell^BB in muK^2) are saved to a CSV file.
    """

    # Cosmological parameters
    H0 = 67.5  # Hubble constant in km/s/Mpc
    ombh2 = 0.022  # Baryon density * h^2
    omch2 = 0.122  # Cold dark matter density * h^2
    mnu = 0.06  # Sum of neutrino masses in eV
    omk = 0.0  # Curvature density (0 for flat)
    tau = 0.06  # Optical depth to reionization
    r_tensor = 0.1  # Tensor-to-scalar ratio
    As = 2e-9  # Scalar amplitude
    ns = 0.965  # Scalar spectral index
    
    lmax_calc = 3000  # Maximum multipole moment to calculate
    delensing_efficiency = 0.10  # Delensing efficiency (10% = 0.10)

    # --- CAMB Setup and Calculation ---
    # Initialize CAMB parameters object
    pars = camb.CAMBparams()

    # Set cosmological parameters
    # H0: Hubble constant at z=0
    # ombh2: Physical baryon density
    # omch2: Physical cold dark matter density
    # mnu: Sum of neutrino masses
    # omk: Omega_k, curvature parameter
    # tau: Optical depth to reionization
    pars.set_cosmology(H0=H0, ombh2=ombh2, omch2=omch2, mnu=mnu, omk=omk, tau=tau)

    # Set initial power spectrum parameters
    # As: Scalar fluctuation amplitude (at k_scalar=0.05 Mpc^-1)
    # ns: Scalar spectral index (at k_scalar=0.05 Mpc^-1)
    # r: Tensor-to-scalar ratio (at k_tensor=0.05 Mpc^-1, unless pivot_tensor is changed)
    pars.InitPower.set_params(As=As, ns=ns, r=r_tensor)

    # We want tensor modes (for primordial B-modes)
    pars.WantTensors = True 

    # Set calculations for lmax
    # lens_potential_accuracy=1 for standard accuracy of lensing calculation.
    # Higher values (e.g. 2-4) give more accuracy at cost of computation time.
    pars.set_for_lmax(lmax=lmax_calc, lens_potential_accuracy=1)

    # Get results from CAMB
    print("Running CAMB to calculate power spectra...")
    results = camb.get_results(pars)
    print("CAMB calculation complete.")

    # --- Power Spectra Extraction and Processing ---
    # Get power spectra. CMB_unit='muK^2' ensures C_ell are returned in muK^2.
    # The dictionary 'powers' will contain 'total', 'unlensed_scalar', 
    # 'lensed_scalar', 'tensor' spectra.
    # Each spectrum is an array of shape (lmax_calc+1, 4), 
    # where columns are TT, EE, BB, TE.
    print("Extracting power spectra...")
    powers = results.get_cmb_power_spectra(CMB_unit='muK^2') 

    # Extract the lensed scalar B-mode power spectrum (C_ell^BB,lensing)
    # This is the B-mode power generated by gravitational lensing of E-modes.
    # It's in the 'lensed_scalar' part of the output.
    cl_lensed_scalar_all_modes = powers['lensed_scalar']
    cl_bb_lensed_scalar = cl_lensed_scalar_all_modes[:, 2]  # BB is the 3rd column (index 2)

    # Extract the tensor B-mode power spectrum (C_ell^BB,tensor or primordial)
    # This is the B-mode power from primordial gravitational waves.
    # It's in the 'tensor' part of the output.
    cl_tensor_all_modes = powers['tensor']
    cl_bb_tensor = cl_tensor_all_modes[:, 2]  # BB is the 3rd column (index 2)

    # Apply delensing
    # The delensed B-mode spectrum is the sum of primordial B-modes and the
    # residual lensed B-modes after delensing.
    # Residual lensed B-mode power = (1 - efficiency) * C_ell^BB,lensing
    cl_bb_delensed = cl_bb_tensor + (1.0 - delensing_efficiency) * cl_bb_lensed_scalar

    # Multipole moments (l values)
    # The spectra arrays are indexed from l=0 to l=lmax_calc.
    ls = np.arange(lmax_calc + 1) # Array [0, 1, ..., lmax_calc]

    # --- DataFrame Creation and CSV Output ---
    # We need results for l from 2 to lmax_calc (inclusive).
    # Slice the arrays from index 2 (which corresponds to l=2).
    ls_output = ls[2:]
    cl_bb_delensed_output = cl_bb_delensed[2:] # Units: muK^2

    # Create a Pandas DataFrame
    df_data = {
        'l': ls_output,
        'BB': cl_bb_delensed_output  # C_ell^BB in muK^2
    }
    df = pd.DataFrame(df_data)

    # Ensure the 'l' column is of integer type
    df['l'] = df['l'].astype(int)

    # Define output directory and filename
    output_dir = 'data'
    csv_filename = os.path.join(output_dir, 'result.csv')

    # Create the output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)

    # Save the DataFrame to a CSV file
    df.to_csv(csv_filename, index=False)

    # --- Reporting ---
    print("\n--- Calculation Summary ---")
    print("Successfully calculated the delensed CMB B-mode power spectrum.")
    print("Cosmological parameters used:")
    print("  Hubble constant (H0): " + str(H0) + " km/s/Mpc")
    print("  Baryon density (ombh2): " + str(ombh2))
    print("  Cold dark matter density (omch2): " + str(omch2))
    print("  Sum of neutrino masses (mnu): " + str(mnu) + " eV")
    print("  Curvature density (omk): " + str(omk))
    print("  Optical depth to reionization (tau): " + str(tau))
    print("  Tensor-to-scalar ratio (r): " + str(r_tensor))
    print("  Scalar amplitude (As): " + str(As))
    print("  Scalar spectral index (ns): " + str(ns))
    print("Other parameters:")
    print("  Maximum multipole (lmax): " + str(lmax_calc))
    print("  Delensing efficiency: " + str(delensing_efficiency * 100) + "%")
    
    print("\nOutput:")
    print("  Results saved to: " + csv_filename)
    print("  The CSV file contains two columns: 'l' (multipole moment) and 'BB' (C_ell^BB in muK^2).")
    
    print("\nSample of the first 5 rows of the output data (l, C_ell^BB [muK^2]):")
    print(df.head().to_string())
    # print("\nSample of the last 5 rows of the output data (l, C_ell^BB [muK^2]):")
    # print(df.tail().to_string()) # This might be too much output, head is usually sufficient


if __name__ == '__main__':
    calculate_delensed_cmb_b_mode()